Implements: FIFOReliableBroadcast, instance frb.

upon event <frb, Init> do:
	sn := 0 ;
	pending := ∅;
	next := [1] N;

upon event <frb, Broadcast | m> do:
	sn := sn + 1 ;
	trigger < beb, Broadcast | [s, m, sn] >;

upon event < beb, Deliver | p , [s, m, sn] > do:
	if (s, m, sn) \ne pending then
		pending := pending ∪ { (s, m, sn) };
		initialize ack[m];
		trigger < beb, Broadcast | [s, m, sn] >;

	if p \ne ack[m] then:
		ack[m] := ack[m] ∪ { p };


	while exists (s, m', sn') ∈ pending such that sn' = next[s] and canDeliver(s, m', sn') do:
		next[s] := next[s] + 1;
		pending := pending \ { (s, m', sn') };
		trigger < frb, Deliver | s , m', sn' >;